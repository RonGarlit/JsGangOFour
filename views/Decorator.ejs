<!DOCTYPE>
<html>

<head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>JsGangOFour-Factory Method Pattern</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- Bootstrap CSS -->
    <%- include('partials/MainStyles') %>
        <!-- PrettyPrints CSS and JS to handle code blocks in HTML code -->
        <%- include('partials/PrettyPrint') %>

            <script src="scripts/decorator.js"></script>

</head>

<body>
    <!-- Start of Nav Section -->
    <%- include('partials/MainNavBar') %>
        <!-- End of Nav Section -->
        <br>
        <div class="container">
            <h2 title="Decorator">Decorator</h2>
            <div class="card text-white bg-secondary">
                <div class="card-body">
                    <div class="card-title">Intent according to the GoF: </div>
                    <p class="card-text">"Attach additional responsibilities to an object dynamically. Decorators provide a flexible alternative
                        to subclassing for extending functionality. "
                    </p>
                </div>
            </div>
            <p>The Decorator pattern extends (decorates) an object’s behavior dynamically. The ability to add new behavior at
                runtime is accomplished by a Decorator object which ‘wraps itself’ around the original object. Multiple decorators
                can add or override functionality to the original object. Some people call this a wrapper pattern. There
                are actually a couple patterns that you could call a wrapper pattern. The thing to keeep in mind that when
                we talk patterns they are kind of abstract. </p>

            <p>Decorators provide flexibility to statically typed languages by allowing runtime changes as opposed to inheritance
                which takes place at compile time. JavaScript, is a dynamic language and the ability to extend an object
                at runtime is baked into the language.</p>


            <div class="card text-white bg-primary mb-3" style="max-width: 25rem;">
                <div class="card-body">
                    <h4 class="card-title">JavaScript Code</h4>
                    <p>
                        <img src="images/javascript-decorator.jpg" alt="Abstract Factory Diagram" class="img-fluid img-thumbnail">
                    </p>
                </div>
            </div>

            <p>If you start down the Angular Framework road you will see the decorator pattern used. Granted in Angular versus
                the older AnuglarJS, Angular uses TypeScript to allow coding using object Oreinted Programming (OOP) techniques.
                TypeScript does this by aplying techniques used in our Optimized JavaScript Code through JsGangOFour.</p>


            <p></p>
            <br>
            <div class="alert alert-dismissible alert-primary">
                <h4 class="alert-heading">JavaScript Code</h4>
                <div>
                    <!-- Follow these links for the google prettyify information
                    https://github.com/google/code-prettify
                    This is the link to the styple for prettyify - We choose Dessert and put in prettify.css
                    https://github.com/google/code-prettify/blob/master/styles/desert.css -->
                    <pre class="prettyprint">
                        //==============================================
                        // decorator.js
                        //==============================================
                        // log helper
                        // Used to add() to var log
                        // then display in alert box
                        // via show() method
                        //==============================================
                        var log = (function () {
                            var log = "";
                            return {
                                add: function (msg) { log += msg + "\n"; },
                                show: function () { alert(log); log = ""; }
                            }
                        })();
                        
                        //==============================================
                        // Decorator
                        // JavaScript does not support class-based 
                        // inheritance therefore the abstract classes.
                        // we must ensure this consistency ourselves
                        // that properties and methods match!!!
                        //==============================================
                        
                        // Here are old and new interfaces
                        // and abstract classes that are used to simulate old 
                        // functionality but hiding the new functionality
                        // without breaking things.
                        //----------------------------------------------
                        
                        // Create the User object we will
                        // later decorate with more properties
                        var User = function (name) {
                            this.name = name;
                            this.say = function () {
                                log.add("User: \n Name: " + this.name);
                            };
                        }
                        
                        // Now pass the User object to the "decorator" object
                        // that we created.
                        var DecoratedUser = function (user, street, city) {
                            this.user = user;
                            this.name = user.name;  // ensures interface stays the same
                            this.street = street;
                            this.city = city;
                            this.say = function () {
                                log.add("Decorated User: \n Name: " + this.name + ", \n Street: " +
                                    this.street + ", \n City: " + this.city);
                            };
                        }
                        
                        //==============================================
                        // run_Decorator()
                        //==============================================
                        function run_Decorator() {
                        
                            log.add("-------------------------");
                            // add to log heler var 
                            log.add("Create the User Object:");
                            // add to log heler var 
                            log.add("-------------------------");
                            var user = new User("Kelly");
                            user.say();
                        
                            log.add("-------------------------");
                            // add to log heler var 
                            log.add("Now decorate above User Object:");
                            // add to log heler var 
                            log.add("-------------------------");
                            var decorated = new DecoratedUser(user, "Broadway", "New York");
                            decorated.say();
                        
                            log.show();
                        }
                    </pre>
                </div>
                <button type="button" class="btn btn-success" onclick="run_Decorator();return false;">Execute run_Decorator()</button>
            </div>


            <p></p>
            <br>
            <div class="alert alert-dismissible alert-primary">
                <h4 class="alert-heading">Optimized JavaScript Code</h4>
                <div>
                    <!-- Follow these links for the google prettyify information
                    https://github.com/google/code-prettify
                    This is the link to the styple for prettyify - We choose Dessert and put in prettify.css
                    https://github.com/google/code-prettify/blob/master/styles/desert.css -->
                    <pre class="prettyprint">
  
                        //REPLACE THIS WITH CODE FROM JS FILE
      
                    </pre>
                </div>
                <button type="button" class="btn btn-success" onclick="run_OptimizedAbstractFactory();return false;">Execute run_OptimizedAbstractFactory()</button>
            </div>

        </div>
        <%- include('partials/MainFooter') %>
            <!-- Optional JavaScript -->
            <!-- jQuery first, then Popper.js, then Bootstrap JS -->
            <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo"
                crossorigin="anonymous"></script>
            <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js" integrity="sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49"
                crossorigin="anonymous"></script>
            <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/js/bootstrap.min.js" integrity="sha384-smHYKdLADwkXOn1EmN1qk/HfnUcbVRZyYmZ4qpPea6sjB/pTJ0euyQp0Mk8ck+5T"
                crossorigin="anonymous"></script>
</body>

</html>