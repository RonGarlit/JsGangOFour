<!DOCTYPE>
<html>

<head>
  <meta charset="utf-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <title>JsGangOFour-Abstract Factory Pattern</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <!-- Bootstrap CSS -->
  <link rel="stylesheet" type="text/css" media="screen" href="css/darkly.bootstrap.min.css" />
  <!-- <link href="css/prettify.css" rel="stylesheet" type="text/css" media="screen"/> -->
  <script src="scripts/abstractfactory.js"></script>
  <script src="scripts/prettify.js"></script>
  <style>
    /*         body {
      background-color: lightcoral;
    }
    h1 {
      color: white;
      text-align: center;
    }

    p {
      font-family: verdana;
      font-size: 20px;
    }

    button{
      color:black;
      background-color: khaki;
    } */
  </style>
</head>

<body>
  <!-- Start of Nav Section -->
  <%- include('partials/MainNavBar') %>
    <!-- End of Nav Section -->
    <div class="container">
      <h2 title="Abstract Factory">Abstract Factory</h2>

      <p>Provide an interface for creating families of related or dependent objects without specifying their concrete classes.
      </p>

      <p>An Abstract Factory creates objects that are related by a common theme. </p>

      <p>In object-oriented programming a Factory is an object that creates other objects. An Abstract Factory has abstracted
        out a theme which is shared by the newly created objects. </p>

      <img src="images/javascript-abstract-factory.jpg" alt="Abstract Factory Diagram">

      <pre>
    function Employee(name) {
        this.name = name;
        this.say = function () {
            log.add("I am employee " + name);
        };
    }

    function EmployeeFactory() {
        this.create = function(name) {
            return new Employee(name);
        };
    }

    function Vendor(name) {
        this.name = name;
        this.say = function () {
            log.add("I am vendor " + name);
        };
    }

    function VendorFactory() {
        this.create = function(name) {
            return new Vendor(name);
        };
    }

    // log helper
    var log = (function () {
        var log = "";
        return {
            add: function (msg) { log += msg + "\n"; },
            show: function () { alert(log); log = ""; }
        }
    })();


    function run() {

        var persons = [];

        var employeeFactory = new EmployeeFactory();
        var vendorFactory = new VendorFactory();

        persons.push(employeeFactory.create("Joan DiSilva"));
        persons.push(employeeFactory.create("Tim O'Neill"));

        persons.push(vendorFactory.create("Gerald Watson"));
        persons.push(vendorFactory.create("Nicole McNight"));

        for (var i = 0, len = persons.length; i < len; i++) {
            persons[i].say();
        }

        log.show();
    }
  </pre>

      <button type="button" onclick="run();return false;">Run() in abstractfactory.js</button>

      <button type="button" onclick="run1();return false;">Optimized Run() in abstractfactory.js</button>
    </div>
    <!-- Optional JavaScript -->
    <!-- jQuery first, then Popper.js, then Bootstrap JS -->
    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo"
      crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js" integrity="sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49"
      crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/js/bootstrap.min.js" integrity="sha384-smHYKdLADwkXOn1EmN1qk/HfnUcbVRZyYmZ4qpPea6sjB/pTJ0euyQp0Mk8ck+5T"
      crossorigin="anonymous"></script>
</body>

</html>
